package com.gaiaonline.battle.ui.battlewin{	import com.gaiaonline.battle.ApplicationInterfaces.IUIFramework;	import com.gaiaonline.battle.GlobalColors;	import com.gaiaonline.battle.newactors.ActorManager;	import com.gaiaonline.battle.newactors.BaseActor;	import com.gaiaonline.battle.newactors.BaseActorEvent;	import com.gaiaonline.battle.ui.UiManager;	import com.gaiaonline.flexModulesAPIs.globalevent.GlobalEvent;	import com.gaiaonline.utils.DisplayObjectUtils;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.utils.getTimer;		public class BattleWinHeader extends MovieClip implements IWinHeader, IBattleWinHeader	{						private var _uiFramework:IUIFramework;				private var _mcFps:MovieClip;				private var _txtZone:TextField;		private var _serverName:String;		private var _zoneName:String;				private var _txtGold:TextField;		private var _icoGold:Sprite;				private var _txtGCash:TextField;		private var _icoGCash:Sprite;				private var _txtChargeOrbs:TextField;		private var _icoChargeOrbs:MovieClip;		private var _txtShadowOrbs:TextField;		private var _icoShadowOrbs:MovieClip;				private var _txtCL:TextField;		private var _icoCL:MovieClip;				private var _mcShopButton:MovieClip;						public function BattleWinHeader()		{			GlobalEvent.eventDispatcher.addEventListener(GlobalEvent.GOLD_UPDATE, onGoldUpdate, false, 0, true);			GlobalEvent.eventDispatcher.addEventListener(GlobalEvent.GCASH_UPDATE, onGCashUpdate, false, 0, true);			GlobalEvent.eventDispatcher.addEventListener(GlobalEvent.PLAYER_STATUS_CHANGED, onPlayerStatusChanged, false, 0, true);			GlobalEvent.eventDispatcher.addEventListener(GlobalEvent.PLAYER_CREATED, onPlayerCreated, false, 0, true)			GlobalEvent.eventDispatcher.addEventListener(GlobalEvent.SUPPRESSED_CL_CHANGE, onSuppressedCLChange, false, 0, true);				GlobalEvent.eventDispatcher.addEventListener(GlobalEvent.BACK_ALLEY_BARGAINS_SHOW_CHANGED, onBackAlleyBargainsShowChanged, false, 0, true);										}				public function init(uiFramework:IUIFramework):void{			this._uiFramework = uiFramework;						this._mcFps = MovieClip(this.getChildByName("mcFps"));			this._uiFramework.tooltipManager.addToolTip(this._mcFps, "Low Frame rate, click for more info");			this._mcFps.addEventListener(MouseEvent.CLICK, onFpsClick, false, 0, true);						this._txtZone = TextField(this.getChildByName("txtZone"));			this._txtZone.selectable = false;			this._txtZone.mouseEnabled = false;						this._txtGold = TextField(this.getChildByName("txtGold"));			this._icoGold = Sprite(this.getChildByName("icoGold"));			this._icoGold.mouseEnabled = this._icoGold.mouseChildren= this._txtGold.mouseEnabled = false;												this._txtGCash = TextField(this.getChildByName("txtGCash"));			this._icoGCash = Sprite(this.getChildByName("icoGCash"));				this._icoGCash.mouseEnabled= this._icoGCash.mouseChildren = this._txtGCash.mouseEnabled = false;									this._txtChargeOrbs = TextField(this.getChildByName("txtChargeOrbs"));			this._icoChargeOrbs = MovieClip(this.getChildByName("icoChargeOrbs"));			this._txtChargeOrbs.mouseEnabled = this._icoChargeOrbs.mouseEnabled = this._icoChargeOrbs.mouseChildren = false;			this._icoChargeOrbs.gotoAndPlay("normal");			this._txtShadowOrbs = TextField(this.getChildByName("txtShadowOrbs"));			this._icoShadowOrbs = MovieClip(this.getChildByName("icoShadowOrbs"));			this._txtShadowOrbs.mouseEnabled = this._icoShadowOrbs.mouseEnabled = this._icoShadowOrbs.mouseChildren = false;			this._icoShadowOrbs.gotoAndPlay("normal");						this._txtCL = TextField(this.getChildByName("txtCL"));			this._icoCL = MovieClip(this.getChildByName("icoCL"));			this._icoCL.mouseEnabled = this._icoCL.mouseChildren = this._txtCL.mouseEnabled = false;						this._icoCL.gotoAndStop("normal");			this._txtCL.textColor = 0xFFFFFF;															this._mcShopButton = MovieClip(this.getChildByName("shopButton"));			this._mcShopButton.gotoAndStop("up");			this._mcShopButton.buttonMode = true;			this._mcShopButton.useHandCursor = true;			this._mcShopButton.addEventListener(MouseEvent.MOUSE_DOWN, onShopButtonDown, false, 0, true);									this._mcShopButton.addEventListener(MouseEvent.MOUSE_OUT, onShopButtonOut, false, 0, true);									this._mcShopButton.addEventListener(MouseEvent.MOUSE_OVER, onShopButtonOver, false, 0, true);									if (this._missedGoldUpdateVal != null) {				this.setGoldText(this._missedGoldUpdateVal);				}			if (this._missedGCashUpdateVal != null) {				this.setGCashText(this._missedGCashUpdateVal);					}			if (this._missedChargeOrbsUpdateVal != null){				this.setChargeOrbsText(this._missedChargeOrbsUpdateVal);			}			if (this._missedShadowOrbsUpdateVal != null){				this.setShadowOrbsText(this._missedShadowOrbsUpdateVal);			}						}				//********** FPS **************		public function startFps():void{			if (!this._fpsRunning){				this._lastUpdate = getTimer();				this._frameCount = 0;				this.addEventListener(Event.ENTER_FRAME, onFrame, false, 0, true);				this._fpsRunning = true;			}			}		public function stopFps():void{			if (this._fpsRunning){				this._mcFps.gotoAndStop(1);				this.removeEventListener(Event.ENTER_FRAME, onFrame);				this._fpsRunning = false;			}			}				private var _fpsRunning:Boolean = false;		private var _frameCount:int = 0;		private var _lastUpdate:int = 0;				private function onFrame(evt:Event):void{						var fpsBar:Number = 5;						this._frameCount ++;			var t:int = getTimer();			var dt:Number = (t - this._lastUpdate)/1000;							if (dt >= 5){							var fps:Number = this._frameCount/dt;												this._lastUpdate = t;				this._frameCount = 0;														if (fps < fpsBar && this._mcFps.currentLabel != "red"){										this._mcFps.gotoAndPlay("red");				}				if (fps >= fpsBar && this._mcFps.currentFrame != 0){										this._mcFps.gotoAndStop(1);				}										}		}				private function onFpsClick(evt:MouseEvent):void{																				GlobalEvent.eventDispatcher.dispatchEvent(new GlobalEvent(GlobalEvent.TEXT_BASED_UI_COMMAND, {paramString:"help:Suggested System Specifications"}));		}						private function onPlayerCreated(e:GlobalEvent):void {			var me:BaseActor = e.data.actor as BaseActor;			var cl:Number =  me.conLevel;			var isCap:Boolean = !isNaN(me.suppressedCL) && me.suppressedCL < me.conLevel;			if (isCap){cl = me.suppressedCL}							this.setChargeOrbsText(me.totalOrbs.chargeOrbs.toString());			this.setShadowOrbsText(me.totalOrbs.darkOrbs.toString());			this.setCLText(UiManager.formatConLevel(cl));						me.addEventListener(BaseActorEvent.ACTOR_CON_LEVEL_UPDATED, this.onCLUpdate, false, 0, true);						me.addEventListener(BaseActorEvent.TOTAL_ORBS_UPDATED, this.onOrbsUpdate, false, 0, true);											}						//****************************		private var _missedGoldUpdateVal:String = null;		private function onGoldUpdate(e:GlobalEvent):void {			var v:int = e.data.count;			var g:String = String(v);			if (this._txtGold) {				this.setGoldText(g);			} else {				this._missedGoldUpdateVal = g;							}		}				private function setGoldText(g:String):void {			if (this._txtGold.text != g) {				this._txtGold.text = g;			}					}				//****************************		private var _missedGCashUpdateVal:String = null;		private function onGCashUpdate(e:GlobalEvent):void {			var v:int = e.data.count;			var g:String = String(v);			if (this._txtGCash) {				if (this._txtGCash.text != g) {					this._txtGCash.text = g;				}			} else {				this._missedGCashUpdateVal = g;			}		}		private function setGCashText(g:String):void {			if (this._txtGCash.text != g) {				this._txtGCash.text = g;			}					}				//***************************		private var _missedChargeOrbsUpdateVal:String = null;		private var _missedShadowOrbsUpdateVal:String = null;		private function onOrbsUpdate(e:BaseActorEvent):void {			var me:BaseActor = e.target as BaseActor;			var charge:String = me.totalOrbs.chargeOrbs.toString();			var shadow:String = me.totalOrbs.darkOrbs.toString();			if (this._txtChargeOrbs) {				this.setChargeOrbsText(charge);			} else {				this._missedChargeOrbsUpdateVal = charge;							}			if (this._txtShadowOrbs) {				this.setShadowOrbsText(shadow);			} else {				this._missedShadowOrbsUpdateVal = shadow;							}		}				private function setChargeOrbsText(g:String):void {			if (this._txtChargeOrbs.text != g) {				this._txtChargeOrbs.text = g;			}					}		private function setShadowOrbsText(g:String):void {			if (this._txtShadowOrbs.text != g) {				this._txtShadowOrbs.text = g;			}					}		public function playDoubleOrb():void{			this._icoChargeOrbs.gotoAndPlay("double");					}		public function stopDoubleOrb():void{			this._icoChargeOrbs.gotoAndPlay("normal");		}			public function playShadowDoubleOrb():void{			this._icoShadowOrbs.gotoAndPlay("double");					}		public function stopShadowDoubleOrb():void{			this._icoShadowOrbs.gotoAndPlay("normal");		}			private function onPlayerStatusChanged(e:GlobalEvent):void {			var data:Object = e.data;			var fxn:Function = null;						switch (data.status) {				case "18106":						fxn = data.play ? this.playDoubleOrb: this.stopDoubleOrb;											break;				case "99999":						fxn = data.play ? this.playShadowDoubleOrb: this.stopShadowDoubleOrb;											break;				default:					break;											}			if (fxn != null) {				fxn();			}		}							//***************************		private var _missedCLUpdateVal:String = null;		private function onCLUpdate(e:BaseActorEvent):void {			updateCL();		}				private function setCLText(g:String):void {			if (this._txtCL.text != g) {				this._txtCL.text = g;			}					}		private function onSuppressedCLChange(evt:GlobalEvent):void{			updateCL();		}				private function updateCL():void{			var me:BaseActor = ActorManager.getInstance().myActor;			var cl:Number =  me.conLevel;			var isCap:Boolean = !isNaN(me.suppressedCL) && me.suppressedCL < me.conLevel;			if (isCap){cl = me.suppressedCL}						var g:String = UiManager.formatConLevel(cl);			if (this._txtCL) {				this.setCLText(g);			} else {				this._missedCLUpdateVal = g;							}						if (isCap){				this._icoCL.gotoAndStop("capped");				this._txtCL.textColor = GlobalColors.CLCapColor;				//tooltipManager.addToolTip(this.icoCL, GlobalTexts.getHudCLTooltip(true));							}else{				this._icoCL.gotoAndStop("normal");				this._txtCL.textColor = 0xFFFFFF;				//tooltipManager.addToolTip(this.icoCL, GlobalTexts.getHudCLTooltip(false));											}		}						//******************************		private function refeshZoneName():void{			if (this._txtZone != null){				this._txtZone.text = this._zoneName + " / " + this._serverName;			}		}				//***************************				private var _shopButtonDown:Boolean = false;		private function onBackAlleyBargainsShowChanged(e:GlobalEvent):void {			var showing:Boolean = e.data.showing;			var source:DisplayObject = e.data.source;			if (source && source == this._mcShopButton) {				this.setShopButtonDownState(e.data.showing);			} else {				this.setShopButtonDownState(e.data.showing, e.data.showing ? "down" : "up");			}						}				private function onShopButtonDown(e:MouseEvent):void {			if (!ActorManager.getInstance().myActor.isGuestUser()) {			this._shopButtonDown = !this._shopButtonDown;			this.setShopButtonDownState(this._shopButtonDown);			GlobalEvent.eventDispatcher.dispatchEvent(new GlobalEvent(GlobalEvent.SET_BACK_ALLEY_BARGAINS_SHOW_STATE, {show:this._shopButtonDown, source:e.currentTarget}));			} else {				// for guests, don't change the button state, and fake the open attempt so we'll pop up the guest warning				GlobalEvent.eventDispatcher.dispatchEvent(new GlobalEvent(GlobalEvent.SET_BACK_ALLEY_BARGAINS_SHOW_STATE, {show:true, source:e.currentTarget}));											}		}		private function setShopButtonDownState(down:Boolean, forceLabel:String = null):void {			var label:String = down ? "down" : "over";			if (ActorManager.getInstance().myActor.isGuestUser() && label == "down") {				return;			}						if (forceLabel != null) {				label = forceLabel;			}			DisplayObjectUtils.stopAllMovieClips(this._mcShopButton);						this._mcShopButton.gotoAndStop(label);			this._shopButtonDown = down;					}				private function onShopButtonOver(e:MouseEvent):void {			if (!this._shopButtonDown) {								this._mcShopButton.stage.addEventListener(Event.MOUSE_LEAVE, onShopButtonMouseLeave, false, 0, true);																											this._mcShopButton.gotoAndStop("over");				DisplayObjectUtils.startAllMovieClips(this._mcShopButton.shop_button_over_anim);			}		}				private function onShopButtonOut(e:MouseEvent):void {			if (!this._shopButtonDown &&				(!e ||				  ( 					(e.relatedObject != this._shopCallout) &&							(e.relatedObject && (!this._mcShopButton || !this._mcShopButton.contains(e.relatedObject))) &&					(e.relatedObject && (!this._shopCallout || !this._shopCallout.contains(e.relatedObject)))				  ) 				 )				){				DisplayObjectUtils.stopAllMovieClips(this._mcShopButton);											this._mcShopButton.gotoAndStop("up");			}					}				private function onShopButtonMouseLeave(e:Event):void {			this._mcShopButton.stage.removeEventListener(Event.MOUSE_LEAVE, onShopButtonMouseLeave);			this.onShopButtonOut(null);		}							//*****************************************		//***** IBattleWinHeader Implemantation ***		//*****************************************		public function getShopButton():Sprite{						return this._mcShopButton;		}				/*		public function getShopButtonOffset():Number {			return this._mcShopButton.x - this._mcShopButton.width; 		}				public function getShopButtonWidth():Number {			return this._mcShopButton.width;		}				public function getShopButtonBottom():Number {			return this._mcShopButton.stage.y + this._mcShopButton.y + this._mcShopButton.height;		}				*/				private var _shopCallout:MovieClip = null;		public function showShopCallout(show:Boolean):void {			return;			if (show) {				if (this.shopCallout && !this.contains(this.shopCallout)) {					DisplayObjectUtils.startAllMovieClips(this.shopCallout);					this.addChild(this.shopCallout);				}				this.shopCallout.x = this._mcShopButton.x;				this.shopCallout.y = this._mcShopButton.y + this._mcShopButton.height - this.shopCallout.height/2;					} else {				if (this.shopCallout && this.contains(this.shopCallout)) {					DisplayObjectUtils.stopAllMovieClips(this.shopCallout);					this.removeChild(this.shopCallout);				}			}		}		private function get shopCallout():MovieClip {			if (!_shopCallout) { 				this._shopCallout = this._uiFramework.assetFactory.getInstance("shop_btn_alert_anim") as MovieClip; 				if (this._shopCallout) {					this._shopCallout.addEventListener(MouseEvent.MOUSE_DOWN, onShopButtonDown, false, 0, true);											this._shopCallout.addEventListener(MouseEvent.MOUSE_OUT, onShopButtonOut, false, 0, true);											this._shopCallout.addEventListener(MouseEvent.MOUSE_OVER, onShopButtonOver, false, 0, true);				}												 											}						return this._shopCallout;		}									//*****************************************		//***** IWinHeaqer Implemantation *********		//*****************************************		public function setSize(width:uint, height:uint, right:Number = 0):void {						this._mcShopButton.x = right - this._mcShopButton.width - 10;			_icoCL.x = _mcShopButton.x - _icoCL.width - 10;			_txtCL.x = _icoCL.x - _txtCL.width - 2;						_icoChargeOrbs.x = _txtCL.x - _icoChargeOrbs.width - 10;			_txtChargeOrbs.x = _icoChargeOrbs.x - _txtChargeOrbs.width - 2;			_icoShadowOrbs.x = _txtChargeOrbs.x - _icoShadowOrbs.width - 10;			_txtShadowOrbs.x = _icoShadowOrbs.x - _txtShadowOrbs.width - 2;						_icoGCash.x = _txtShadowOrbs.x - _icoGCash.width - 10;			_txtGCash.x = _icoGCash.x - _txtGCash.width - 2;			_icoGold.x = _txtGCash.x - _icoGold.width - 10;			_txtGold.x = _icoGold.x - _txtGold.width - 2;		}				public function set serverName(v:String):void{			this._serverName = v;			this.refeshZoneName();		}		public function get serverName():String{			return this._serverName		}				public function set zoneName(v:String):void{			this._zoneName = v;			this.refeshZoneName();		}		public function get zoneName():String{			return this._zoneName		}	}}