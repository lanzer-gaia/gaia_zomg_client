package com.gaiaonline.battle.ui{	import com.gaiaonline.battle.ui.events.UiEvents;	import com.gaiaonline.events.LoginPanelEvent;	import com.gaiaonline.platform.ui.ILoginPanel;	import com.gaiaonline.utils.DisplayObjectUtils;		import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.filters.DropShadowFilter;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.system.Security;	import flash.text.TextField;

	public class UiLoginPanel extends MovieClip implements ILoginPanel	{		public var mcLogin:MovieClip;					protected var guest:* = null;			public var serverIp:String;				protected var _username:String;		protected var _partnerID: String = "0";		protected var _baseURL: String;		protected var _useCaptcha:Boolean = false;				public function UiLoginPanel()		{				this.tabEnabled = true;			TextField(this.mcLogin.txtUser).tabIndex = 0;			TextField(this.mcLogin.txtPass).tabIndex = 1;			TextField(this.mcLogin.gsiSubdomain.txtGsi).tabIndex = 2;			SimpleButton(this.mcLogin.btnForgot).tabIndex = 3;			TextField(this.mcLogin.autoconnectIP.txtAutoconnectIP).tabIndex = 4;							if (this.mcLogin.mcErr) {				this.mcLogin.mcErr.visible = false;			}									// development only			showDevUI(Security.sandboxType != Security.REMOTE);						if (this.mcLogin.btnSubmit) {				this.mcLogin.btnSubmit.addEventListener(MouseEvent.CLICK, onBtnSubmitClick, false, 0, true);				SimpleButton(this.mcLogin.btnSubmit).tabEnabled = false;			}									// make sure we're using the gsiUrl passed in						this.mcLogin.btnGuest.addEventListener(MouseEvent.CLICK, onBtnGuestClick, false, 0, true);			this.mcLogin.btnForgot.addEventListener(MouseEvent.CLICK, onForgotLogin, false, 0, true);			SimpleButton(this.mcLogin.btnGuest).tabEnabled = false;						var f:Array = [new DropShadowFilter(5,45,0x000000,1,5,5,0.75, 1)]			this.filters = f;						this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage, false, 0, true);			this.addEventListener(Event.REMOVED_FROM_STAGE, onRemoveFromStage, false, 0, true);		}				private function onAddedToStage(evt:Event):void{			this.resize();			this.stage.addEventListener(Event.RESIZE, onResize, false, 0, true);			this.stage.addEventListener(KeyboardEvent.KEY_DOWN, _onKeyDown, false, 0, true);			}				private function onRemoveFromStage(evt:Event):void{			this.stage.removeEventListener(Event.RESIZE, onResize);			this.stage.removeEventListener(KeyboardEvent.KEY_DOWN, _onKeyDown);			this.stage.focus = null;		}		protected function _onKeyDown(evt:KeyboardEvent):void{			switch(evt.keyCode) {				case 13:					SimpleButton(this.mcLogin.btnSubmit).dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 71:					if (evt.ctrlKey && evt.shiftKey) { // developers ctrl-shft-g						this.showDevUI(true);					}					break;								default:					break;			} 					}		private function onResize(evt:Event):void{			this.resize();		}		private function resize():void{									this.x = this.stage.stageWidth/2 - this.mcLogin.width/2;			this.y = this.stage.stageHeight/2 - this.mcLogin.height/2;						trace("\n\n " + x + " , " + y + " | " + this.mcLogin.width + " , " + this.mcLogin.height);						if (this.guest != null){				this.guest.x = this.mcLogin.x;				this.guest.y = this.mcLogin.y;			}		}				private function onBtnSubmitClick (evt:MouseEvent):void{			if (evt.target) {				if (this.mcLogin.txtUser.text.length >= 1 && this.mcLogin.txtPass.text.length >= 1 ){					this.dispatchEvent(new LoginPanelEvent(LoginPanelEvent.LOGIN));					this.setErrorText("");					this.mcLogin.mcErr.visible = false;				}else{					this.setErrorText("Incorrect login")					this.mcLogin.mcErr.visible = true;				}			}		}								//***************************************		//---- Guest Login ----------------------		//***************************************		private var _cachedRegistrationWidgetLoader:RegistrationWidgetLoader = null;		private function onBtnGuestClick(evt:MouseEvent):void{			this.showGuestPicker();		}			public function showGuestPicker():void{			this.mcLogin.visible = false;						if (this.guest == null) {	// first time				_cachedRegistrationWidgetLoader = new RegistrationWidgetLoader(RegistrationWidgetLoader.MODE_PICKER, gsiSubdomain, _baseURL, _partnerID, _useCaptcha);				_cachedRegistrationWidgetLoader.addEventListener(ProgressEvent.PROGRESS, onRegistrationWidgetLoaderProgress);				DisplayObjectUtils.addWeakListener(_cachedRegistrationWidgetLoader, Event.INIT, onRegistrationWidgetLoaded); 			} else {				guest.stepOne();				guest.visible = true;			}		}				private function onForgotLogin(evt:MouseEvent):void {			navigateToURL(new URLRequest("http://"+gsiSubdomain+".gaiaonline.com/account/sendpass"), "_top");		}				private function onRegistrationWidgetLoaderProgress(event: ProgressEvent): void		{			dispatchEvent(event);		}				private function onRegistrationWidgetLoaded(evt:Event):void {			guest = _cachedRegistrationWidgetLoader.widget;			_cachedRegistrationWidgetLoader = null;			this.guest.x = this.mcLogin.x;			this.guest.y = this.mcLogin.y;						this.addChild(this.guest);								this.guest.addEventListener("CLOSE", onGuestClose, false, 0, true);			this.guest.addEventListener("REGISTER", onLoginRegister, false, 0, true);				this.guest.addEventListener("LOGIN_COMPLETE", onGuestSelected, false, 0, true); // finished guest avatar selection		}				protected function onGuestClose(evt:Event):void {			if (guest) {				this.guest.visible = false;			}			this.mcLogin.visible = true;		}				private function onGuestSelected(evt:Event):void {			this.guest.visible = false;						this.dispatchEvent(new Event("GUEST_SELECTED"));						dispatchEvent(new LoginPanelEvent(LoginPanelEvent.GUEST_LOGIN));		}				protected function onLoginRegister(evt:Event):void {			var e:UiEvents = new UiEvents(UiEvents.REGISTER, "guest");			this.dispatchEvent(e);						dispatchEvent(new LoginPanelEvent(LoginPanelEvent.GUEST_LOGIN));		}						public function setErrorText(txt:String):void{			if (this.mcLogin.mcErr) {				if(txt != null && txt.length > 0){					this.mcLogin.mcErr.visible = true;					this.mcLogin.mcErr.txtError.text = txt;				}else{					this.mcLogin.mcErr.visible = false;					this.mcLogin.mcErr.txtError.text = "";				}			}		}						//******** Properties *****************		public function get username():String{			if (this.mcLogin.txtUser) {				return this.mcLogin.txtUser.text;			} else {				return _username;			}		}		public function set username(v:String):void{			_username = v;			if (this.mcLogin.txtUser) {				this.mcLogin.txtUser.text = v;			}		}				//dev only		private function showDevUI(visible:Boolean):void {			showGsiSubdomain(visible);			showAutoconnectIP(visible);		}						private function showGsiSubdomain(visible:Boolean):void {			this.mcLogin.gsiSubdomain.visible = visible;		}		private function showAutoconnectIP(visible:Boolean):void {			if (this.mcLogin && this.mcLogin.autoconnectIP) {				this.mcLogin.autoconnectIP.visible = visible;			}		}				public function get autoconnectIP():String{			var ip:String = null;			if (this.mcLogin && this.mcLogin.autoconnectIP) {				ip = this.mcLogin.autoconnectIP.txtAutoconnectIP.text;			}						return ip;				}				public function get registrationUrl():String {			return "http://"+gsiSubdomain+".gaiaonline.com/register/flash/?partnerID="+_partnerID+"&parentApp=zOMG";	// skinned zOMG registration		}				public function get password():String{			return this.mcLogin.txtPass.text;		}					public function set password(s: String): void {			this.mcLogin.txtPass.text = s;		}				public function get gsiSubdomain():String{			return this.mcLogin.gsiSubdomain.txtGsi.text;		}		public function set gsiSubdomain(v:String):void{			this.mcLogin.gsiSubdomain.txtGsi.text = v;		}		public function get partnerID(): String		{			return _partnerID;		}				public function set partnerID(s: String): void		{			_partnerID = s;		}				public function get baseURL(): String		{			return _baseURL;		}				public function set baseURL(s: String): void		{			_baseURL = s;		}		public function get useCaptcha(): Boolean		{			return _useCaptcha;		}				public function set useCaptcha(useCaptcha: Boolean): void		{			_useCaptcha = useCaptcha;		}	}}